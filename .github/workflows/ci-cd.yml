name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # ========== CI 階段 ==========
  lint-and-test:
    name: 🔍 代碼品質檢查
    runs-on: ubuntu-latest
    steps:
      - name: 📥 檢出代碼
        uses: actions/checkout@v4

      - name: 🟢 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 安裝 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📚 快取依賴
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 🔧 安裝依賴
        run: pnpm install --frozen-lockfile

      - name: 🔍 TypeScript 檢查
        run: pnpm vue-tsc --noEmit

      - name: 🧪 運行測試 (如果有)
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm test
          else
            echo "沒有找到測試腳本，跳過測試"
          fi

  build:
    name: 🏗️ 建置應用
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: 📥 檢出代碼
        uses: actions/checkout@v4

      - name: 🟢 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 安裝 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 安裝依賴
        run: pnpm install --frozen-lockfile

      - name: 🏗️ 建置專案
        run: pnpm build

      - name: 📤 上傳建置產物
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  # ========== CD 階段 ==========
  deploy-vercel:
    name: 🚀 部署到 Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 檢出代碼
        uses: actions/checkout@v4

      - name: 📥 下載建置產物
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: 🚀 部署到 Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  deploy-pages:
    name: 📄 部署到 GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📥 下載建置產物
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: 📄 設置 Pages
        uses: actions/configure-pages@v5

      - name: 📤 上傳到 Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/client/

      - name: 🚀 部署 Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ========== 通知階段 ==========
  notify:
    name: 📢 部署通知
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-pages]
    if: always()
    steps:
      - name: 📢 部署結果通知
        run: |
          if [ "${{ needs.deploy-vercel.result }}" == "success" ] || [ "${{ needs.deploy-pages.result }}" == "success" ]; then
            echo "🎉 部署成功！"
          else
            echo "❌ 部署失敗"
            exit 1
          fi 